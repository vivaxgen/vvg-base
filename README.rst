vivaxGEN Base Installation Utility
==================================

This repo contains the necessary helpers for system installation of most
vivaxGEN system packages.


Installation
------------

To install, execute the following command::

    "${SHELL}" <(curl -L https://raw.githubusercontent.com/vivaxgen/vvg-base/main/install.sh)

Optional enviroment variable that can be supplied for the above commands are:

- MAMBA_ROOT_PREFIX

- PYVER

- uMAMBA_ENVNAME

- BASEDIR


Quick Overview
--------------

The objective of this vivaxGEN Base utility is (1) to be able to easily install
a set of software packages including the binary dependencies, (2) in any
directory, (3) without the needs to install any prerequisite software other
than ``curl`` and ``bash`` shell, (4) by users without root privileges, and
(5) allowing other users who can access the installation directory to also use
the software packages (6) without cluttering their home directory, system
directory and the home directory of the user who initiates the installation.

A standalone micromamba is utilized to provide all necessary binary
dependencies.
The standalone micromamba binary will be downloaded and installed in the
installation directory, and all of its configuration and settings will be
stored in the installation directory as well.
There will be no files stored nor any modification in the home directory of
users, apart from pip cache in ~/.cache/pip/ and some added lines in
``~/.conda/environments.txt`` (if the file already exists) of the user who
executes the installation script.
The added lines can be removed manually without affecting the installed system.
The pip cache can be removed with ``pip cache remove`` or ``pip cache purge``
if necessary (please consult this
`documentation <https://pip.pypa.io/en/stable/cli/pip_cache/>`_).

The following is base layout of the directories generated by the installation
script, assuming that VVG_BASEDIR is the root/base directory of the
installation::

    VVG_BASEDIR/
                bin/
                    activate
                    micromamba
                opt/
                    umamba/
                    apptainer/
                envs/
                     vvg-base/
                etc/
                    bashrc -> ../vvg-base/etc/bashrc
                    bashrc.d

Information about each file/directory in the base layout is as follow:

    ``bin/activate``
        This is the main activation/source script that can be executed
        to spawn a new shell, or sourced in the current shell or inside a shell
        script.
        The script basically sets up some environment variables, and then calls
        ``envs/vvg-base/bin/activate``.
        The script itself is generated by executing the generator script
        ``envs/vvg-base/bin/generate-activation-script.py``.

    ``bin/micromamba``
        This is the micromamba executable binary, specific for each system/
        architecture.

    ``opt/umamba/``
        This directory contains any files related to micromamba, such as
        environment settings and all binary dependencies files.

    ``opt/apptainer/``
        This directory contains filesystem images for apptainer/singularity.

    ``envs/``
        This directory hold repositories cloned from git repositories such as
        github, including the vvg-base itself.
        Other repositories (such as various pipelines) need to be cloned here.

    ``envs/vvg-base/``
        This is the repository of ``vvg-base`` cloned from github repository.

    ``etc/bashrc``
        This is the main source file, which is needed to be sourced first
        before using the installed software (``bin/activate`` sources this file
        automatically).
        This file is normally a symbolic link to ``envs/vvg-base/etc/bashrc``

    ``etc/bashrc.d``
        This directory contains bash resource files to be sourced in an
        alphabetical order when ``etc/bashrc`` is being sourced.
        Software package's specific activation source file should be put (or
        linked) inside this directory.

        The activation source file name should be prefixed with 2-digit and
        dash, as example the source file for vivaxGEN NGS-Pipeline is
        ``10-ngs-pipeline``.
        Other pipelines and software packages relying on vivaxGEN NGS-Pipeline
        should use number starting from ``50-``.
        Other global settings that can be modified by users should use number
        starting from ``90-``, eg. the snakemake job scheduler profile setting
        is ``99-snakemake-profiles``.

The layout has been designed so that the number of files that are not managed
is very minimal (only ``bin/activate``, ``bin/micromamba`` and
filesystem images under ``opt/apptainer``).
Files under ``opt/umamba`` is managed by micromamba, while the rest of files
can be symbolic links to any repository in the ``envs/`` directory, which can
be updated by pulling the respective repository.

The vivaxGEN Base utility also provides some command line tools as follows:

    ``export-environment.sh``
        This script can be used to export the micromamba environment files.

    ``generate-activation-script.py``
        This script is used to generate ``VVG_BASEDIR/bin/activate`` script.

    ``set-cluster-config.sh``
        This script will autodetect if there is any batch/job scheduler
        installed in the system, such as SLURM or PBS, and set the
        SNAKEMAKE_PROFILE enviroment variable accordingly to the correct
        profile.

    ``update-pipeline.sh``
        This script can be executed to update all cloned repository in the
        ``envs`` directory.

After the Base utility environment has been activated, the above commands can
be accessed using $VVGBIN environment variable, eg::

    $VVGBIN/update-pipeline.sh

The installation script for vivaxGEN Base utility will also install the
following software using micromamba with conda-forge channel (optional software
will be installed unless the software are already installed in the system):

- git [optional]
- coreutils (for ``readlink`` and ``realpath``) [optional]
- parallel [optional]
- c compiler suite (c-compiler, usually gcc) [optional]
- c++ compiler suite (cxx-compiler, usually g++) [optional]
- Python (3.12)
- Snakemake (8.x)

